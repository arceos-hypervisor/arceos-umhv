name: Setup NimbOS Guest Image 

inputs:
  nimbos-version:
    description: 'NimbOS version to use'
    required: true
    type: string
  nimbos-repo:
    description: 'NimbOS repository to use'
    required: false
    type: string
    default: 'arceos-hypervisor/nimbos'
  arch:
    description: 'Architecture to build for'
    required: true
    type: string
  bios-version:
    description: 'BIOS version to use (only for x86_64)'
    required: false
    type: string
    default: 'latest'
  bios-repo:
    description: 'BIOS repository to use (only for x86_64)'
    required: false
    type: string
    default: 'arceos-hypervisor/axvm-bios-x86'
  disk-path:
    description: 'Absolute path to the disk image (relative paths will NOT work)'
    required: true
    type: string

runs:
  using: "composite"
  steps:
  - name: Make temporary directory
    shell: bash
    run: mkdir -p temp
  - name: Download NimbOS
    uses: dsaltares/fetch-gh-release-asset@1.1.2
    with:
      file: ${{ inputs.arch }}_usertests.zip
      repo: ${{ inputs.nimbos-repo }}
      version: ${{ inputs.nimbos-version }}
      target: temp/${{ inputs.arch }}.zip
  - name: Unzip NimbOS
    shell: bash
    run: |
      unzip temp/${{ inputs.arch }}.zip -d temp
      rm temp/${{ inputs.arch }}.zip
      mv temp/nimbos.bin temp/nimbos-${{ inputs.arch }}.bin
  - name: Download BIOS
    if: inputs.arch == 'x86_64'
    uses: dsaltares/fetch-gh-release-asset@1.1.2
    with:
      file: axvm-bios.bin
      repo: ${{ inputs.bios-repo }}
      version: ${{ inputs.bios-version }}
      target: temp/rvm-bios.bin
  - name: Create Image
    shell: bash
    run: |
      make -C arceos-vmm DISK_IMG=${{ inputs.disk-path }} disk_img
      sudo mkdir -p img
      sudo chown root:root temp/*
      sudo mount ${{ inputs.disk-path }} img
      sudo mv temp/* img
      sudo umount img
  - name: Cleanup
    shell: bash
    run: rm -rf temp img
